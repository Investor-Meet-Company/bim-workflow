name: 1. Build, Test, Push Docker Image

on:
  workflow_call:
    secrets:
      GIT_PRIVATE_KEY:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
    inputs:
      ECR_REPOSITORY: # set this to your Amazon ECR repository name
        type: string
        required: true
      AWS_REGION: # set this to your preferred AWS region, e.g. us-west-1
        type: string
        required: false
        default: eu-west-1
      runs-on:
        type: string
        required: false
        default: ubuntu-latest
    outputs:
      image-tag:
        description: "Image Tags"
        value: ${{ jobs.build.outputs.image-tag }}

permissions:
  checks: write
  contents: read
  issues: read
  pull-requests: write

jobs:
  build:
    name: Build Docker Image With Buildx
    runs-on: ${{ inputs.runs-on }}
    environment: production
    outputs:
      image-tag: ${{ steps.image.outputs.sha }}
    steps:
      - name: Create Docker Network
        run: docker network create data

      # options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      #  docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag
      - name: Setup Mysql
        run: |
          docker run --hostname mysql --network data -e MYSQL_DATABASE=database_testing -e MYSQL_USER=database_testing -e MYSQL_PASSWORD=database_testing -e MYSQL_ROOT_PASSWORD=database_testing -d mysql:8
        env:
          MYSQL_DATABASE: database_testing
          MYSQL_USER: database_testing
          MYSQL_PASSWORD: database_testing
          MYSQL_ROOT_PASSWORD: database_testing

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Set Sha Tag
        id: image
        run: |
          echo "::set-output name=sha::sha-$(git rev-parse --short=7 HEAD)"

      - uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.GIT_PRIVATE_KEY }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.AWS_REGION }}
          mask-aws-account-id: 'no'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Prepare meta
        id: meta
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            "${{ env.ECR_REGISTRY }}/${{ inputs.ECR_REPOSITORY }}"
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build production image
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: docker/app/dockerfile
          push: false # Pre testing
          tags: bim/app:test
          cache-from: type=gha, scope=${{ github.workflow }}
          cache-to: type=gha, scope=${{ github.workflow }}
          load: true
          target: devbuild
          ssh: |
            default=${{ env.SSH_AUTH_SOCK }}

      # https://ovirium.com/blog/how-to-make-mysql-work-in-your-github-actions/
#      - name: Set up MySQL
#        run: |
#          sudo /etc/init.d/mysql start
#          mysql -e 'CREATE DATABASE ${{ env.DB_DATABASE }};' -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }}
#        env:
#          DB_DATABASE: database_testing
#          DB_USER: root
#          DB_PASSWORD: root


      - name: Test
        run: |
          docker run -v results:/results --network data --rm bim/app:test test

#      - name: Test Dusk
#        run: |
#          docker run -v results:/results --rm bim/app:test dusk

#      - name: Results
#        run: cat results/phpunit/laravel.xml
#
#      - name: Publish Unit Test Results
#        uses: EnricoMi/publish-unit-test-result-action@v1
#        id: test-results
#        if: always()
#        with:
#          files: "results/**/*.xml"

      - name: Build production image
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: docker/app/dockerfile
          push: true # Post testing
          tags: ${{ steps.meta.outputs.tags }}
          target: production
          ssh: |
            default=${{ env.SSH_AUTH_SOCK }}